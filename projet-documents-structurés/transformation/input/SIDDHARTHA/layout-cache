<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet
  exclude-result-prefixes="office style text table draw fo xlink dc
			   meta number tei svg chart dr3d math form
			   script ooo ooow oooc dom xforms xs xsd xsi"
  office:version="1.0" version="2.0" 
  xmlns:xs="http://www.w3.org/2001/XMLSchema"
  xmlns="http://www.tei-c.org/ns/1.0"
  xmlns:tei="http://www.tei-c.org/ns/1.0"
  xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0"
  xmlns:dc="http://purl.org/dc/elements/1.1/"
  xmlns:dom="http://www.w3.org/2001/xml-events"
  xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0"
  xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0"
  xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0"
  xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0"
  xmlns:math="http://www.w3.org/1998/Math/MathML"
  xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0"
  xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0"
  xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0"
  xmlns:ooo="http://openoffice.org/2004/office"
  xmlns:oooc="http://openoffice.org/2004/calc"
  xmlns:ooow="http://openoffice.org/2004/writer"
  xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0"
  xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0"
  xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0"
  xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0"
  xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0"
  xmlns:xforms="http://www.w3.org/2002/xforms"
  xmlns:xlink="http://www.w3.org/1999/xlink"
  xmlns:xsd="http://www.w3.org/2001/XMLSchema"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:xsl="http://www.w3.org/1999/XSL/Transform">

  <xsl:key match="style:style" name="STYLES" use="@style:name"/>


  <xsl:key match="text:h" name="Headings" use="text:outline-level"/>
  <xsl:param name="dir">.</xsl:param>

  <xsl:output encoding="utf-8" indent="yes"/>
  
  <xsl:variable name="META">
    <xsl:choose>
      <xsl:when test="doc-available(concat($dir,'/meta.xml'))">
        <xsl:copy-of select="document(concat($dir,'/meta.xml'))//office:meta"/>
      </xsl:when>
      <xsl:when test="/office:document/office:meta">
        <xsl:copy-of select="/office:document/office:meta"/>
      </xsl:when>
      <xsl:otherwise>
        <xsl:copy-of select="/office:document-meta/office:meta"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:variable>



  <xsl:template match="office:document-content|office:body">
    
    <TEI>
	<xsl:for-each select="$META/office:meta/dc:language">
	  <xsl:attribute name="xml:lang">
	    <xsl:value-of select="normalize-space(.)"/>
	  </xsl:attribute>
	</xsl:for-each>  
      <xsl:call-template name="teiHeader"/>
      <text>
	<xsl:apply-templates/>
      </text>
    </TEI>
  </xsl:template>


  <xsl:template name="teiHeader">
    <teiHeader>
      <fileDesc>
        <titleStmt>
          <title>
            <xsl:value-of select="$META/office:meta/meta:user-defined[@meta:name='Titre']"/>
          </title>
          <author>
            <xsl:value-of
              select="$META/office:meta/meta:user-defined[@meta:name='Auteur']"/>
          </author>
        </titleStmt>
        <editionStmt>
          <edition>
            <date>
              <xsl:attribute name="when">
                <xsl:value-of select="$META/office:meta/meta:user-defined[@meta:name='Date de la source']"/>
              </xsl:attribute>
              <xsl:value-of
                select="$META/office:meta/meta:user-defined[@meta:name='Date de publication']"/>
            </date>
          </edition>
        </editionStmt>
        <publicationStmt>
          <authority/>
          <availability>
            <licence><xsl:attribute name="target">
              <xsl:value-of select="$META/office:meta/meta:user-defined[@meta:name='Licence']"/>
            </xsl:attribute>Lien vers la licence</licence>
          </availability>=
        </publicationStmt>
        <sourceDesc>
          <p><xsl:value-of
            select="$META/office:meta/meta:user-defined[@meta:name='Description']"/>
          </p>
          <p><xsl:value-of
            select="$META/office:meta/meta:user-defined[@meta:name='Source']"/>
          </p>
        </sourceDesc>
      </fileDesc>
      <xsl:variable name="pD">
        <xsl:if test="$META/office:meta/dc:language">
          <langUsage>
            <language>
              <xsl:attribute name="ident">
                <xsl:value-of select="$META/office:meta/dc:language"/>
              </xsl:attribute>
              <xsl:value-of select="$META/office:meta/dc:language"/>
            </language>
          </langUsage>
        </xsl:if>
        <xsl:if test="$META/office:meta/meta:keyword">
          <textClass>
            <keywords scheme="unknown">
              <list>
                <xsl:for-each select="$META/office:meta/meta:keyword">
                  <item>
                    <xsl:value-of select="."/>
                  </item>
                </xsl:for-each>
              </list>
            </keywords>
          </textClass>
        </xsl:if>
      </xsl:variable>
      <xsl:if test="$pD/*">
        <profileDesc>
          <xsl:copy-of select="$pD"/>
        </profileDesc>
      </xsl:if>
      <revisionDesc>
        <listChange>
          <change>
            <name>
              <xsl:apply-templates
                select="$META/office:meta/dc:creator"/>
            </name>
            <date>
              <xsl:apply-templates select="$META/office:meta/dc:date"/>
            </date>
          </change>
        </listChange>
      </revisionDesc>
    </teiHeader>
  </xsl:template>
  
  <xsl:template match="/office:document-content/office:body">
      <xsl:apply-templates/>
  </xsl:template>

  <xsl:template match="text:h[@text:outline-level]">
	<HEAD n="{@text:outline-level}" >
	  <xsl:apply-templates/>
	</HEAD>
  </xsl:template>
  
  
  <xsl:template match="text:p">
      <xsl:choose>
       <xsl:when test="count(parent::text:note-body/text:p)=1">
          <xsl:apply-templates/>
      </xsl:when>
      <xsl:when test="count(parent::text:list-item/text:p)=1">
          <xsl:apply-templates/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:call-template name="applyStyle"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>
  
  <xsl:template name="applyStyle">
    <xsl:variable name="name">
      <xsl:value-of select="replace(@text:style-name,'tei_5f_','')"/>
    </xsl:variable>
    <xsl:variable name="style">
      <xsl:value-of select="@text:style-name"/>
    </xsl:variable>
    <xsl:choose>
      <xsl:when test="doc-available('../names.xml') and
		      doc('../names.xml')//tei:gi[.=$name]">
      </xsl:when>
      <xsl:otherwise>
	<xsl:variable name="rendition"
		      select="tei:inlineStyles($style,.)"/>
	<xsl:choose>
	  <xsl:when test="self::text:p and count(parent::table:table-cell/text:p)=1">
	    <xsl:if test="not($rendition='')">
	      <xsl:attribute name="rend" select="$rendition"/>
	    </xsl:if>
	    <xsl:apply-templates/>
	  </xsl:when>
	  <xsl:when test="self::text:p">
	    <p>     
	      <xsl:apply-templates/>
	    </p>
	  </xsl:when>
	  <xsl:when test="$rendition=''">
	    <xsl:apply-templates/>
	  </xsl:when>
	</xsl:choose>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:template>



  <xsl:template match="text:tab">
    <xsl:text>	</xsl:text>
  </xsl:template>

  <xsl:template match="text:s">
    <xsl:text> </xsl:text>
  </xsl:template>
  
  <xsl:template match="text:*"> [[[UNTRANSLATED <xsl:value-of
  select="name(.)"/>:     <xsl:apply-templates/>]]] </xsl:template>
      <xsl:function name="tei:inlineStyles"  as="xs:string">
      <xsl:param name="name"/>
      <xsl:param name="context"/>
      <xsl:choose>
	<xsl:when test="starts-with($name,'tei_5f_')">
	  <xsl:value-of select="substring($name,8)"/>
	</xsl:when>
	<xsl:otherwise>
	  <xsl:variable name="r">
	    <xsl:for-each select="$context/key('STYLES',$name)">
	      <xsl:if
		  test="style:paragraph-properties/@fo:text-align">
		<xsl:value-of
		    select="style:paragraph-properties/@fo:text-align"/>
		<xsl:text> </xsl:text>
	  </xsl:if>	  

	  


	 
	    </xsl:for-each>
	  </xsl:variable>
	  <xsl:value-of select="normalize-space($r)"/>
	</xsl:otherwise>
      </xsl:choose>
    </xsl:function>
 
  
</xsl:stylesheet>
