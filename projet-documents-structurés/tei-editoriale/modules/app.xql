xquery version "3.1";

module namespace app="http://exist-db.org/apps/tei-editoriale/templates";

import module namespace templates="http://exist-db.org/xquery/templates" ;
import module namespace config="http://exist-db.org/apps/tei-editoriale/config" at "config.xqm";
import module namespace kwic = "http://exist-db.org/xquery/kwic" at "resource:org/exist/xquery/lib/kwic.xql";
declare namespace tei="http://www.tei-c.org/ns/1.0";
declare namespace functx = 'http://www.functx.com';

(:~
: This is a sample templating function. It will be called by the templating module if
: it encounters an HTML element with an attribute: data-template="app:test" or class="app:test" (deprecated). 
: The function has to take 2 default parameters. Additional parameters are automatically mapped to
: any matching request or function parameter.
: 
: @param $node the HTML node with the attribute which triggered this call
: @param $model a map containing arbitrary data - used to pass information between template calls
:)

declare function app:test($node as node(), $model as map(*)) {
<p>Dummy template output generated by function app:test at {current-dateTime()}. The templating
    function was triggered by the data-template attribute <code>data-template="app:test"</code>.</p>
};


declare function functx:substring-after-last
( $arg as xs:string? ,
$delim as xs:string )  as xs:string {
replace ($arg,concat('^.*',$delim),'')
};

declare function app:list($node as node(), $model as map(*)) {
for $doc in collection(concat($config:app-root, '/data/'))//tei:TEI
return
<li>
    <a href="{concat("show.html?document=",functx:substring-after-last(document-uri(root($doc)), "/"))}">{document-uri(root($doc))}</a>
</li>
};

declare function app:XMLtoHTML ($node as node(), $model as map (*), $query as xs:string?) {
let $ref := xs:string(request:get-parameter("document", ""))
let $xml := doc(replace(concat($config:app-root,"/data/",$ref), '/exist/', '/db/'))
let $xsl := doc(concat($config:app-root, "/resources/xslt/xml-to-html.xsl"))
let $params :=
<parameters>
    {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
    <param name="{$p}"  value="{$val}"/>
    }
</parameters>

return
transform:transform($xml, $xsl, $params)
};

declare function app:lit-index ($node as node(), $model as map (*), $query as xs:string?) {
let $xml := doc("/db/apps/tei-editoriale/index.xml")
let $xsl := doc("/db/apps/tei-editoriale/resources/xslt/xml-to-html.xsl")
let $params :=
<parameters>
    {for $p in request:get-parameter-names()
    let $val := request:get-parameter($p,())
    where  not($p = ("document","directory","stylesheet"))
    return
    <param name="{$p}"  value="{$val}"/>
    }
</parameters>

return
transform:transform($xml, $xsl, $params)
};


declare function app:search($node as node(), $model as map (*)) {
if (request:get-parameter("inputword", "") !="") then
let $searchword as xs:string:= request:get-parameter("inputword", "")
for $hit in collection(concat($config:app-root, '/data/'))//tei:p[ft:query(.,$searchword)]
let $document := document-uri(root($hit))
let $docname := functx:substring-after-last(document-uri(root($hit)), '/')
let $href := concat('show.html','?document=', $docname)
let $score as xs:float := ft:score($hit)
order by $score descending
return

    <tr>
    <td class="score">{$score}</td>
    <td>{kwic:summarize($hit, <config width="40" link="{concat("http://localhost:8080/exist/rest/db/apps/tei-editoriale/data/",$docname)}" />)}</td>
    <td><a href="{$href}">{$docname}</a></td>
    </tr>

else
<div>Champ vide !</div>
};

declare function app:authorsearch($node as node(), $model as map (*)) {
if (request:get-parameter("inputaut", "") !="") then
let $searchaut as xs:string:= request:get-parameter("inputaut", "")
for $hit in collection(concat($config:app-root, '/data/'))//tei:author[ft:query(.,$searchaut)]
let $document := document-uri(root($hit))
let $docname := functx:substring-after-last(document-uri(root($hit)), '/')
let $href := concat('show.html','?document=', $docname)
let $score as xs:float := ft:score($hit)
order by $score descending
return
    <tr>
    <td class="score">{$score}</td>
    <td>{kwic:summarize($hit, <config width="40" link="{concat("http://localhost:8080/exist/rest/db/apps/tei-editoriale/data/",$docname)}" />)}</td>
    <td><a href="{$href}">{$docname}</a></td>
     </tr>
else
<div>Champ vide !</div>
};

declare function app:datesearch($node as node(), $model as map (*)) {
if (request:get-parameter("inputdate", "") !="") then
let $searchdate as xs:string:= request:get-parameter("inputdate", "")
for $hit in collection(concat($config:app-root, '/data/'))//tei:date[@when=$searchdate]
let $document := document-uri(root($hit))
let $docname := functx:substring-after-last(document-uri(root($hit)), '/')
let $href := concat('show.html','?document=', $docname)
return
    <tr>
    <td class="score"></td>
    <td>{$docname}</td>
    <td><a href="{$href}">{$docname}</a></td>
    </tr>
else
<div>Champ vide !</div>
};

declare function app:doublesearch($node as node(), $model as map (*)) {
if ((request:get-parameter("dbinputaut", "") !="") and (request:get-parameter("dbinputword", "") !="")) then
let $tsearch as xs:string:= request:get-parameter("dbinputword", "")
let $asearch as xs:string:= request:get-parameter("dbinputaut", "")
for $hit in collection(concat($config:app-root, '/data/'))//tei:TEI[.//tei:author[ft:query(.,$asearch)] and .//tei:p[ft:query(.,$tsearch)]]
let $document := document-uri(root($hit))
let $docname := functx:substring-after-last(document-uri(root($hit)), '/')
let $href := concat('show.html','?document=', $docname)
let $score as xs:float := ft:score($hit)
order by $score descending
return
    <tr>
    <td class="score">{$score}</td>
    <td>{kwic:summarize($hit, <config width="40" link="{concat("http://localhost:8080/exist/rest/db/apps/tei-editoriale/data/",$docname)}" />)}</td>
    <td><a href="{$href}">{$docname}</a></td>
    </tr>
else
<div>Champ vide !</div>
};